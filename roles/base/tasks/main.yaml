- name: enable magic sysra
  lineinfile: >
    dest=/etc/sysctl.d/90-magic-sysrq.conf
    state=present
    line="kernel.sysrq=1"
    regexp="^kernel.sysrq.*"
    create=true

- name: allow .local resolution with avahi, so kio-fuse will work
  lineinfile: >
    dest=/etc/nsswitch.conf
    state=present
    line="hosts: mymachines mdns_minimal [NOTFOUND=return] resolve [!UNAVAIL=return] files myhostname dns"
    regexp="^hosts:"
    create=false

- replace: dest=/etc/ssh/ssh_config replace="    AddressFamily inet" regexp="^#   AddressFamily.*"
  when: ansible_distribution == "Ubuntu"

- name: do ubuntu specific things
  block:
    - apt_repository:
        repo: "{{item}}"
        state: present
      with_items:
        - 'deb http://archive.ubuntu.com/ubuntu {{ansible_distribution_release}} multiverse'
        - 'deb-src http://archive.ubuntu.com/ubuntu {{ansible_distribution_release}} multiverse'
        - 'deb http://archive.ubuntu.com/ubuntu {{ansible_distribution_release}}-updates multiverse'
        - 'deb-src http://archive.ubuntu.com/ubuntu {{ansible_distribution_release}}-updates multiverse'
        - 'ppa:git-core/ppa'

    - name: google cloud packages
      apt_key: >
        url={{ google_cloud_url }}
        state=present

    - name: add key for dropbox
      apt_key: >
        keyserver={{ dropbox_keyserver }}
        id={{ dropbox_key }}
        state=present

    - name: add key for docker
      apt_key: >
        url={{ docker_key_url }}
        state=present

    - name: add key for google chrome
      apt_key: >
        url={{ chrome_key_url }}
        state=present

    - name: add key for packagecloud
      apt_key: >
        url={{ packagecloud_key_url }}
        state=present

    - name: activate addons apt sources
      template: src=addons.list.j2 dest=/etc/apt/sources.list.d/addons.list
      register: newsources

    - apt: update_cache=yes
      when: newsources is changed

    - name: install base packages
      apt: name={{base_packages}} state=present
  when: ansible_distribution == "Ubuntu"

- name: do fedora specific things
  block:
    - name: install some repos
      template: src={{item}} dest=/etc/yum.repos.d/{{item | basename }}
      with_fileglob:
        - "../templates/*.repo"

    - name: install base modules
      command: dnf -y module install {{ item }}
      with_items: "{{ fedora_modules }}"

    - name: install base packages
      dnf: name={{fedora_packages}} state=present
  when: ansible_distribution == "Fedora"

- name: do arch specific things
  block:
    - name: Use reflector to fetch from german mirrors
      lineinfile:
        path: /etc/xdg/reflector/reflector.conf
        line: --country Germany

    - name: Ensures /etc/pacman.d/hooks/ dir exists
      file: path=/etc/pacman.d/hooks/ state=directory

    - name: install mirrorupgrade hook
      copy:
        src: mirrorupgrade
        dest: /etc/pacman.d/hooks/mirrorupgrade.hook

    # - name: install german mirrors
    #   template: src=pacman-mirrorlist.j2 dest=/etc/pacman.d/mirrorlist mode=0644

    - name: remove old packages
      pacman: name={{absent_packages}} state=absent

    - name: install base packages
      pacman: name={{arch_packages}} state=present

    - name: Add the flathub flatpak repository remote to the user installation
      flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    - name: Add the KDE flathub flatpak repository remote
      flatpak_remote:
        name: kdeapps
        state: present
        flatpakrepo_url: https://distribute.kde.org/kdeapps.flatpakrepo
    - user:
        name: aur_builder
        group: wheel
        system: yes
    - lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
        create: yes
        validate: 'visudo -cf %s'
    # - name: Recursively remove directory
    #   become: yes
    #   become_user: aur_builder
    #   shell: chmod -R 755 ~/.cache/yay
    - name: install base aur packages
      kewlfft.aur.aur: name={{aur_packages}} state=present aur_only=yes
      become: yes
      become_user: aur_builder
      async: 3600
      poll: 0
      register: aur_installs
    - name: install modconfig for v4l2
      template: src=v4l2loopback.conf.j2 dest=/etc/modprobe.d/v4l2loopback.conf
    - name: load v4l2
      template: src=v4l2loopback.load.j2 dest=/etc/modules-load.d/v4l2loopback.conf
  when: ansible_distribution == "Archlinux"

# develop with docker you get after a few hours this error:
#   neighbour: arp_cache: neighbor table overflow!
# so we have to increase some values
- sysctl:
    name: net.ipv4.neigh.default.gc_thresh1
    value: 8096
    sysctl_file: /etc/sysctl.d/docker_dev_neigh_cache.conf
    reload: yes
- sysctl:
    name: net.ipv4.neigh.default.gc_thresh2
    value: 12288
    sysctl_file: /etc/sysctl.d/docker_dev_neigh_cache.conf
    reload: yes
- sysctl:
    name: net.ipv4.neigh.default.gc_thresh3
    value: 16384
    sysctl_file: /etc/sysctl.d/docker_dev_neigh_cache.conf
    reload: yes
- name: set conntrack max, so minikube and kind will work again
  sysctl:
    name: net.netfilter.nf_conntrack_max
    value: 393216
    sysctl_file: /etc/sysctl.d/docker_dev_neigh_cache.conf
    reload: yes

- name: enable userns for podman
  sysctl:
    name: kernel.unprivileged_userns_clone
    value: 1
    sysctl_file: /etc/sysctl.d/podman.conf
    reload: yes

- name: set subuid/subgid
  lineinfile: dest=/etc/{{item}} state=present line="usc:100000:65536" create=true
  loop:
    - subuid
    - subgid

- name: create s3fs credentials file
  template: src=passwd-s3fs.j2 dest=/etc/passwd-s3fs mode=0600
  when: s3_music_key is defined

- name: check if s3 music mountpoint exists
  stat: path="{{ s3_music_mount }}"
  register: s3_dir
  changed_when: False
  when: s3_music_key is defined

- name: s3 music mountpoint
  file: path={{ s3_music_mount }} state=directory mode=0777
  when: s3_music_key is defined and s3_dir.stat.exists is defined and not s3_dir.stat.exists

- name: s3fs mount
  mount: >
    name={{ s3_music_mount }}
    src='{{ s3_music_bucket }}'
    fstype=fuse.s3fs
    opts=_netdev,allow_other
    state=mounted
  when: s3_music_key is defined

- name: systemd settings
  file: path=/etc/systemd/{{item}}/ state=directory mode=0755
  loop:
    - system.conf.d
    - timesyncd.conf.d
    - journald.conf.d

- name: create ntp settings
  template: src=ntp.conf.j2 dest=/etc/systemd/timesyncd.conf.d/ntp.conf mode=0644
- name: create system settings
  template: src=system.conf.j2 dest=/etc/systemd/system.conf.d/system.conf mode=0644
- name: create journal settings
  template: src=journal.conf.j2 dest=/etc/systemd/journald.conf.d/journal.conf mode=0644

- name: create a cups restarter after resuming
  template: src=cupsresume.service.j2 dest=/etc/systemd/system/cupsresume.service

- name: enable the cupsrestarter
  systemd: daemon_reload=yes name=cupsresume enabled=yes

- name: disable integraged webcam in one of my laptops
  template:
    src: integrated_webcam_disable.rules.j2
    dest: /etc/udev/rules.d/40-disable-internal-webcam.rules
  when: "'usc-precision' == ansible_hostname"
