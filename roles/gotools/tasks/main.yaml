- name: check go version
  command: grep -q "{{golang_version}}" {{go_base}}/VERSION
  register: goversion
  always_run: True
  ignore_errors: True
  changed_when: False

- name: remove old go installation when go version changed
  file: path={{go_base}} state=absent
  when: goversion.rc != 0

- name: create go destination path (recreate if previous task deleted it)
  file: path={{go_base}} state=directory mode=0755

# don't use unarchive-task here, becaus it has a bug when the target
# directory does not exist (https://github.com/ansible/ansible-modules-core/issues/2936)
- name: download go
  get_url: >
    url=https://storage.googleapis.com/golang/go{{golang_version}}.linux-amd64.tar.gz
    dest=/tmp/go{{golang_version}}.linux-amd64.tar.gz
  when: goversion.rc != 0

- name: unpack go
  shell: cd {{localinstallation}} && tar xzf /tmp/go{{golang_version}}.linux-amd64.tar.gz && rm /tmp/go{{golang_version}}.linux-amd64.tar.gz
  when: goversion.rc != 0

- name: check goapp version
  command: grep -q "{{goapp_version}}" {{goapp_base}}/VERSION
  register: goappversion
  always_run: True
  ignore_errors: True
  changed_when: False

- name: remove old goapp installation when goapp version changed
  file: path={{goapp_base}} state=absent
  when: goappversion.rc != 0

- name: create go/appengine destination path (recreate if previous task deleted it)
  file: path={{goapp_base}} state=directory mode=0755

- name: download go appengine
  get_url: >
    url=https://storage.googleapis.com/appengine-sdks/featured/go_appengine_sdk_linux_amd64-{{goapp_version}}.zip
    dest=/tmp/go_appengine_sdk_linux_amd64-{{goapp_version}}.zip
  when: goappversion.rc != 0

- name: unpack go
  shell: cd {{localinstallation}} && unzip /tmp/go_appengine_sdk_linux_amd64-{{goapp_version}}.zip && rm /tmp/go_appengine_sdk_linux_amd64-{{goapp_version}}.zip
  when: goappversion.rc != 0
